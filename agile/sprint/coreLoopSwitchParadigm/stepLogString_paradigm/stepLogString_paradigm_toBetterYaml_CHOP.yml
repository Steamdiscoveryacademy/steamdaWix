    let DOX = `≈438≈ pstEnrSeven202108STEP_SALS_EXE_SWITCH BEGIN`;
    local.setItem('logString', local.getItem('logString') + ',' + DOX);
    memory.setItem('stepLogString','');// MAYBE TOO CLOSE, but can back-up later


Notes:
- user zPIPEz & zEQz (zEQUALSIGNz) String Data s Blood-Brain-Barrier to local.sgetItem('logString')
- start zEEMPTYz, 
- each Element will end with a zPIPEz: don't worry about trailing zPIPEz
  - ¿¡ perhaps split('|') will not render trailing empty element!?
- UPPERCASE vs lowercase is only for my feeble human self:
  - (including here in this dox)
  - ANYWHERE that Code could confuse things it will go .toUpperCase()

Element as Array Templay:
  "{key}=message={lineNumber}={doPostWatchdogLogBooleanString}|"
Element as Array Structure:
- 1 first Element: key: is 'Sufficient' so far as Watchdog-Bootstrap:
  - IF 'Sufficient' both Bootstrap and Watchdog Keys are determined
  - IF NOT 'Sufficient' then just 'SOMETHING' (maybe something more later)
    - you may start with a zEQz for zEEMPTYz as a NOT 'Sufficient' something
- 2 second Element: message: is the Message String (long short just no zPIPEz or zEQz)
  - do replace() literal 'zPIPEz' and 'zEQz' string with the characters when its safe
  - supported, but BEWARE zCOMMAz's
  - Eventually, maybe, some ALIAS's mapped to a Library
    - BECAUSE we don't want these to get too verbose at the source
    - YET we do want to support fully cogent messages upon renderign
    - indeed 'DEFAULT' is already supported
- 3 lineNumber: 
  - if use BTL-String-Booleans ['TTRUE','FFALSE'] then Assume #4
  - do attempt to use zEQzzEQz for No LineNumber though
- 4 boolean: doPostWatchdogLog (doPostWatchdogLogBooleanString)
  - use BTL-String-Booleans ['TTRUE','FFALSE']
    - since it's all String Based, keep it explicitly String 
  - default as 'FFALSE', since mostly unused

Examples: 
- EMERGENCY=The deDupe routine FAILED=1223=TTRUE|
  elementObject: {
    "message": "The deDupe routine FAILED",
    "line": "1223",
    "bootstrap": "danger",
    "watchdog": "EMERGENCY",
    "postLogString": "TTRUE",
    "postLog": true,
  }
  notes:[
    "line as string because more flexible",
    "both postLogString and postLog because, well, it's an object so you can",
    " ↪ string because it's the SOURCE and boolean because it works in code",
    "attempted meaningful order, but..."
    ]
- warning=There were more than 2 Contacts by stEmail|
  elementObject: {
    "message": "There were more than 2 Contacts by stEmail",
    "line": "",
    "bootstrap": "warning",
    "watchdog": "WARNING",
    "postLogString": "",
    "postLog": false,
  }
  notes:[
    "postLogString is empty-string because it is the SOURCE, but postLog is (default) false"
  ]
- success=DEFAULT|
  elementObject: {
    "message": "DEFAULT",
    "line": "",
    "bootstrap": "success",
    "watchdog": "INFO",
    "postLogString": "",
    "postLog": false,
  }
  notes:[
    "Example of ALIAS use, the already supported 'DEFAULT'"
  ]
- primary=A rare instance where primary is overridden=2457|
  elementObject: {
    "message": "A rare instance where primary is overridden",
    "line": "2457",
    "bootstrap": "primary",
    "watchdog": "INFO",
    "postLogString": "",
    "postLog": false,
  }
- devel=This is not a show-stopper but we need to support unfound Staff-Eye-Ds=TTRUE|
  elementObject: {
    "message": "A rare instance where primary is overridden",
    "line": "2457",
    "bootstrap": "devel",
    "watchdog": "DEBUG",
    "postLogString": "TTRUE",
    "postLog": true,
  }





let uniqueWatchdogBootstrapKeyArray =
["EMERGENCY",
"CRITICAL",
"ERROR",
"ALERT",
"WARNING",
"NOTICE",
"success",
"primary",
"info",
"secondary",
"devel"];

let SUFFIENT_WatchdogBootstrapKeyArray =
["EMERGENCY",
"CRITICAL",
"ERROR",
"danger",
"ALERT",
"WARNING",
"NOTICE",
"success",
"primary",
"info",
"secondary",
"devel",
"DEBUG"];

let SUFFICIENT_2D_WatchdogBootstrapUserInterfaceKeyArray =
[
["EMERGENCY","danger","response"],
["CRITICAL","danger","response"],
["ERROR","danger","response"],
["danger","ERROR","response"],
["ALERT","warning","response"],
["WARNING","warning","response"],
["NOTICE","warning","response"],
["success","INFO","response"],
["primary","INFO","primary"],
["info","INFO","info"],
["secondary","INFO","secondary"],
["devel","DEBUG","devel"],
["DEBUG","devel","devel"]
];
// ø <---------- <NOTE: SUFFICIENT_2D_WatchdogBootstrapUserInterfaceKeyArray must be included in Quokka Code>  ---------->
// ø <---------- <use this code to build sufficientObjectLookup in Quokka>  ---------->
console.warn('SUFFICIENT_2D_WatchdogBootstrapUserInterfaceKeyArray: ');
console.warn('Is Array: ' + Array.isArray(SUFFICIENT_2D_WatchdogBootstrapUserInterfaceKeyArray));
console.warn('Has Length: ' + SUFFICIENT_2D_WatchdogBootstrapUserInterfaceKeyArray.length);
console.warn('Example Object:');
console.warn(`EMERGENCY: { bootstrap: 'DANGER', watchdog: 'EMERGENCY' , uiPlacement: 'RESPONSE'}`);
let sufficientObjectLookup = {};
let elementObject = {};
let key = 'STRING';
let bootstrap = 'STRING';
let watchdog = 'STRING';
let uiPlacement = 'STRING';
let index = 0;
SUFFICIENT_2D_WatchdogBootstrapUserInterfaceKeyArray.forEach(elementArray => {
    // console.log(elementArray);
    /**
     * can use various values for KEY
     * using uiPlacement since this is the task
     * of course, I want to get away from Case, but Upper vs Lower _matters_ in source Array
     */
    let key = elementArray[0].toUpperCase();
    bootstrap = elementArray[0] === elementArray[0].toUpperCase() ? elementArray[1] : elementArray[0];
    watchdog = elementArray[0] === elementArray[0].toUpperCase() ? elementArray[0] : elementArray[1];
    bootstrap = bootstrap.toUpperCase();
    watchdog = watchdog.toUpperCase();//OOAAOC
    uiPlacement = elementArray[2].toUpperCase();

    if(!Object.keys(sufficientObjectLookup).includes(key)){
        sufficientObjectLookup[key] = {};
    }

    elementObject = {}
    elementObject.bootstrap = bootstrap;
    elementObject.watchdog = watchdog;
    elementObject.uiPlacement = uiPlacement;
    // ø <Use this code if you ever need to place these into a Repeater>
    // elementObject.index = index;
    // elementObject._id = index.toString();
    // ø </Use this code if you ever need to place these into a Repeater>
    index++;
    sufficientObjectLookup[key] = elementObject;
});
console.warn('let sufficientObjectLookup = ');
console.warn(sufficientObjectLookup);
// ø <---------- </use this code to build sufficientObjectLookup in Quokka> ---------->
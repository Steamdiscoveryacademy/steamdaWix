export function kallKittyKat(path) {
    const kittyKatObject = {
        "name": "Steam Discovery Academy",
        "altNames": {
            "abbrv": "SteamDA"
        },
        "domains": [
            "steamda.com",
            "steamdiscoveryacademy.com"
        ],
        "regions": [
            {
                "name": "Charlottesville",
                "addresses": [
                    {
                        "Address": "100 10th Street, NE ",
                        "Address2": "Suite 300",
                        "city": "Charlottesville",
                        "state": "VA",
                        "Zip": "22902",
                        "formatted": "100 10th Street, NE Suite 300, Charlottesville, VA 22902"
                    }
                ],
                "phones": [
                    "434-987-3918"
                ],
                "zipcodes": {
                    "threeDigit": {
                        "exclusive": ["201","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268"],
                        "overlap": []
                    },
                    "fiveDigit": {
                        "exclusive": [],
                        "overlap": []
                    },
                    "notes": [
                        "for 3 digit overlap where within that there is no overlap for some 5 digits within, use 5 digit arrays",
                        "...thus there should be very few overlap 5 digit zip codes"
                    ]
                },
                "timezone": {
                    "name": "Eastern Time",
                    "abbrv": "ET",
                }
            }
        ]
    };
        //kittyKatObject. //=15
        //don't abide typos of full path
        let kkStart = path.substr(0,15).toLocaleLowerCase();
        if (kkStart === 'kittykatobject.') {
            path = path.substr(15);    
        }
        console.log('parsted path: ' + path);
        let evalPath = 'kittyKatObject.' + path;
        let result = eval(evalPath);
        // let resultString = "RESULT"
        // if (typeof result === 'object') {
        //     resultString = JSON.stringify(result,undefined,4);
        // } else {
        //     resultString = result;
        // }
    
        return result;
        // return resultString;
    }
    
    export function getKittyKatTZ(dateString = "") {
    
        let timestamp = Date.parse(dateString);
        console.log(timestamp)
        
        if (isNaN(timestamp) === false) {
            var dateParamFinal = new Date(timestamp);
        } else {
            var dateParamFinal = new Date();
        }
        console.log(dateParamFinal);
        const nowISO = dateParamFinal.toISOString();
        console.log(nowISO);
    
        let timezone =  {
            "name:": "Eastern Time",
            "abbrv": "ET",
            "afterArray":[
                ["2015-03-08T02:00:00","daylight"],["2015-11-01T02:00:00","standard"],
                ["2016-03-13T02:00:00","daylight"],["2016-11-06T02:00:00","standard"],
                ["2017-03-12T02:00:00","daylight"],["2017-11-05T02:00:00","standard"],
                ["2018-03-11T02:00:00","daylight"],["2018-11-04T02:00:00","standard"],
                ["2019-03-10T02:00:00","daylight"],["2019-11-03T02:00:00","standard"],
                ["2020-03-08T02:00:00","daylight"],["2020-11-01T02:00:00","standard"],
                ["2021-03-14T02:00:00","daylight"],["2021-11-07T02:00:00","standard"],
                ["2022-03-13T02:00:00","daylight"],["2022-11-06T02:00:00","standard"],
                ["2023-03-12T02:00:00","daylight"],["2023-11-05T02:00:00","standard"],
                ["2024-03-10T02:00:00","daylight"],["2024-11-03T02:00:00","standard"],
                ["2025-03-09T02:00:00","daylight"],["2025-11-02T02:00:00","standard"],
                ["2026-03-08T02:00:00","daylight"],["2026-11-01T02:00:00","standard"],
                ["2027-03-14T02:00:00","daylight"],["2027-11-07T02:00:00","standard"],
                ["2028-03-12T02:00:00","daylight"],["2028-11-05T02:00:00","standard"],
                ["2029-03-11T02:00:00","daylight"],["2029-11-04T02:00:00","standard"]
                ],
            "standard": {
                "key": "standard",
                "name": "Eastern Standard Time",
                "abbrv": "EST",
                "offest": -5
            },
            "daylight": {
                "key": "daylight",
                "name": "Eastern Daylight Time",
                "abbrv": "EDT",
                "offest": -4
            }
        };
        // export function getKittyKatTZ(kittyKatObject, dateString = "") {
        let afterArrayParam = timezone.afterArray;
        console.log(afterArrayParam);
        for (let index = 0; index < afterArrayParam.length; index++) {
            let elementISO = afterArrayParam[index][0];
            let elementValue = afterArrayParam[index][1];
            if (nowISO < elementISO) {
                console.log(elementISO)
                // return elementValue;
                let last = index - 1;
                let key = afterArrayParam[last][1]
                console.log(key)
                return timezone[key];
            }
        }
    }